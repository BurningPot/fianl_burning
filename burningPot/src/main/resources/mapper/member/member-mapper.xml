<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
	<!-- HYD -->
	<delete id="deleteAllContent" parameterType="_int" statementType="CALLABLE">
		{call DEL_ALL_CONTENT_OF_EXPEL(#{mNum})}	
	</delete>
	
	
	<update id="updateExpelMember" parameterType="hashmap">
		UPDATE MEMBER SET MID = #{mId}, PASSWORD = #{password}, MNAME = '강제탈퇴', MPICTURE = DEFAULT, EXPEL = 'Y', MCATEGORY = '강제탈퇴'
		WHERE MNUM = #{mNum}
	</update>
	
	
	<select id="selectMaleFavor" resultType="Statistics">
		<![CDATA[
		SELECT * FROM (SELECT RANK() OVER(ORDER BY COUNT(RNUM) DESC) RANKING, COUNT(RNUM) COUNTING, RNAME FROM RECOMMEND RE
		JOIN MEMBER M USING(MNUM) 
		JOIN RECIPE RP USING(RNUM)
		WHERE GENDER = 'M' GROUP BY GENDER, RNAME ORDER BY RANKING) WHERE RANKING <= 5
		]]>
	</select>
	
	<select id="selectFemaleFavor" resultType="Statistics">
		<![CDATA[
		SELECT * FROM (SELECT RANK() OVER(ORDER BY COUNT(RNUM) DESC) RANKING, COUNT(RNUM) COUNTING, RNAME FROM RECOMMEND RE
		JOIN MEMBER M USING(MNUM) 
		JOIN RECIPE RP USING(RNUM)
		WHERE GENDER = 'F' GROUP BY GENDER, RNAME ORDER BY RANKING) WHERE RANKING <= 5
		]]>	
	</select>
	
	
	<select id="selectPopularRecipeRanking" resultType="Statistics">
		<![CDATA[
		SELECT * FROM (SELECT RANK() OVER(ORDER BY COUNT(RE.MNUM) DESC) RANKING, RNUM, RNAME, M.MNAME, COUNT(RE.MNUM) COUNTING FROM RECOMMEND RE 
		JOIN RECIPE RP USING(RNUM)
		JOIN MEMBER M ON(M.MNUM = RP.MNUM)
		GROUP BY RNUM, RNAME, M.MNAME) WHERE RANKING <=5	
		]]>
	</select>
	<select id="selectTopWriter" resultType="Statistics">
		<![CDATA[
		SELECT * FROM (SELECT RANK() OVER(ORDER BY COUNT(RNUM) DESC) RANKING, MNAME, COUNT(RNUM) COUNTING FROM RECIPE 
		JOIN MEMBER USING(MNUM)
		GROUP BY MNAME ORDER BY COUNT(RNUM) DESC) WHERE RANKING <=5
		]]>
	</select>
	
		
	<select id="selectAgeCount" resultType="_int">
		<![CDATA[
		SELECT COUNT(AGE) AGECOUNT FROM(SELECT MNAME, FLOOR((MONTHS_BETWEEN(SYSDATE, BIRTHDATE))/12) AGE FROM MEMBER) WHERE AGE <20
		UNION ALL
		SELECT COUNT(AGE) AGECOUNT FROM(SELECT MNAME, FLOOR((MONTHS_BETWEEN(SYSDATE, BIRTHDATE))/12) AGE FROM MEMBER) WHERE AGE <30 AND AGE >=20
		UNION ALL
		SELECT COUNT(AGE) AGECOUNT FROM(SELECT MNAME, FLOOR((MONTHS_BETWEEN(SYSDATE, BIRTHDATE))/12) AGE FROM MEMBER) WHERE AGE <40 AND AGE >=30
		UNION ALL
		SELECT COUNT(AGE) AGECOUNT FROM(SELECT MNAME, FLOOR((MONTHS_BETWEEN(SYSDATE, BIRTHDATE))/12) AGE FROM MEMBER) WHERE AGE <50 AND AGE >=40
		UNION ALL
		SELECT COUNT(AGE) AGECOUNT FROM(SELECT MNAME, FLOOR((MONTHS_BETWEEN(SYSDATE, BIRTHDATE))/12) AGE FROM MEMBER) WHERE AGE >=50
		]]>
	</select>
	
	<select id="selectGenderCount" resultType="_int">
		SELECT COUNT(*) FROM MEMBER WHERE GENDER = 'M'
		UNION ALL
		SELECT COUNT(*) FROM MEMBER WHERE GENDER = 'F'
	</select>
	
	
	
	
	<select id="selectMemberList" parameterType="hashmap" resultType="Member">
		SELECT * FROM (SELECT ROWNUM RNUM, PAGING.* FROM (SELECT MNUM, MCATEGORY ,MID, EMAIL, MNAME, GENDER, BIRTHDATE, MPICTURE, EXPEL, ENROLLDATE FROM MEMBER 
		WHERE EXPEL = 'N' AND MCATEGORY = '회원'	
		<if test="customSelect != null">
			<if test="keyword != null">
			<bind name="keyword1" value="'%' + keyword + '%'"/>
				<if test="customSelect == 'name'">					
					AND MNAME LIKE #{keyword1}
				</if>
				<if test="customSelect == 'id'">
					AND MID LIKE #{keyword1}
				</if>
				<if test="customSelect == 'gender'">
					AND GENDER = #{keyword}
				</if>							
			</if>
		</if>		
		ORDER BY MNUM) PAGING) 
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
		
	</select>
	
	<select id="selectCountMember" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) FROM MEMBER WHERE EXPEL = 'N' AND MCATEGORY = '회원'		
		<if test="customSelect != null">		
			<if test="keyword != null">
			<bind name="keyword1" value="'%' + keyword + '%'" />
				<if test="customSelect == 'name'">					
					AND MNAME LIKE #{keyword1}
				</if>
				<if test="customSelect == 'id'">
					AND MID LIKE #{keyword1}
				</if>
				<if test="customSelect == 'gender'">
					AND GENDER = #{keyword}
				</if>							
			</if>
		</if>
	</select>		
	
	<select id="selectOneMember" parameterType="string" resultType="Member">
		SELECT MID, MNAME, EMAIL, GENDER, BIRTHDATE, MPICTURE FROM MEMBER WHERE MNUM = #{mNum}
	</select>
	<!-- HYD -->
	
	<!-- 예찬 mapper 부분 -->
	<select id="checkIdDuplicate" resultType="_int">
		SELECT COUNT(*) AS CNT FROM MEMBER WHERE MID = #{mId}
	</select>
	
	<select id="checkEmailDuplicate" resultType="_int">
		SELECT COUNT(*) AS CNT FROM MEMBER WHERE EMAIL = #{email}
	</select>
	
	<select id="checkNameDuplicate" resultType="_int">
		SELECT COUNT(*) AS CNT FROM MEMBER WHERE MNAME = #{mName}
	</select>
	
<!-- 	
	<select id="selectOneMember" parameterType="string" resultMap="memberMap">
		SELECT * FROM MEMBER WHERE USERID = #{mId}
	</select>
	 -->
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER VALUES(SEQ_MEMBER.NEXTVAL, #{mCategory}, 
						#{mId}, #{password}, #{email}, #{mName}, #{gender}, #{birthDate}, #{mPicture},
						DEFAULT, SYSDATE)
	</insert>
	
	<select id="selectMemberId" parameterType="string" resultType="Member">
		SELECT * FROM MEMBER WHERE MID = #{userId}
	</select>
	
	<insert id="createAuthKey" parameterType="hashmap">
		INSERT INTO EMAIL_CONFIRM VALUES(#{email}, #{key}, DEFAULT)
	</insert>
	
	<select id="chkAuth" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) FROM EMAIL_CONFIRM WHERE EMAIL = #{email} AND TEMPKEY = #{key}
	</select>
	
	<update id="userAuth" parameterType="string">
		UPDATE EMAIL_CONFIRM SET ISPERMIT = 'Y' WHERE EMAIL = #{email} 
	</update>
	
	<delete id="deleteMail"  parameterType="string" >
		DELETE FROM EMAIL_CONFIRM WHERE EMAIL = #{emailAddr}
	</delete>
	
	<select id="checkEmailConfirm" parameterType="string" resultType="string">
		SELECT ISPERMIT FROM EMAIL_CONFIRM WHERE EMAIL = #{emailAddr}
	</select>
	
	<!-- 예찬 mapper 부분 끝 -->
</mapper>
